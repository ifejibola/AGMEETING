
NOTES ON SOCKET.IO AND STANDARD FUNCTIONS

fetch and ajax make a new request to the server each time they're used

WebSocket is better because we only make one connection, and then we can make as many small requests as we need

- Really good for text

Need a server and a client, which connects to the server

Enables communication between browser and server in real time through the use of websockets
Has a Node.js server and a client side library 
Implementations for the client side other languages as well, maintained by community 

How it works
Client attempts to establish websocket connection with server
Falls back to http with long polling if this is not possible
“Wrapper around the websocket API”
It is NOT a websocket implementation 

Has debugging utility 
Works with popular testing frameworks, such as mocha and jest
Typescript support

We will most likely be utilizing the real time communication aspect of websocket functionality for many different aspects of AGMeeting, like the voting, chat, and potentially other applications. 

Syntax is relatively simple, making use of events and callback functions. 


SERVER

INSTALL

`npm i socket.io`

SETUP

`const io = require('socket.io')(3000, { cors: {origin: ["https://localhost:8080",]}})`
^ above example, this is requiring the function for socket.io on port 3000, which we bind to the variable io. We need the optional cors tag in order to not have our code blocked by CORS (Cross-origin resource sharing) which allows a page running on one server to request data from another server (think imbedded i-frames in html)

`io.on('connection', socket){}`
^ above example is a function that runs ever time a client connects to the server

`socket.id`
^ above is a unique id for each session active on the server. It is reset upon refreshing the page.

`socket.on(NAME_OF_EVENT, (Variable 1, Variable 2, Variable n) => {})`
^ above listens for a client to emit the event NAME_OF_EVENT and passes the variables to the function in line.

`io.emit(NAME_OF_EVENT, VARIABLES)`
^ above calls the function with the matching event name on the client and passes it the variables listed. Emit sends to ALL clients, including the client which called the event.

`socket.broadcast.emit(NAME_OF_EVENT, VARIABLES)`
^ above does the same as io.emit() but excludes the client which made the call.

`socket.to(SPECIFIER).emit(NAME_OF_EVENT, VARIABLES)`
^ above does the same as io.emit() but sends the event signal only to sockets which match SPECIFIER. This can be a room ID, a namespace, or a socket ID. 

`socket.join(ROOM_NAME)`
^ above joins the relevant socket to the room ROOM_NAME. Only on the server side. Place inside io.on() function.




CLIENT

INSTALL

`npm i socket.io-client`

USAGE

`import { io } from 'socket.io-client'`
^ above imports the requirements for socket.io on the client side

`const socket = io('http://localhost:3000')`
^ above creates an instance of socket on the server at the url in io(), which is localhost because that's where the server is currently running. Port 3000 because that's what we defined in the server file.

`socket.on`
^ above listens for any event from the server

`socket.on('connection')`
^ above runs when the client connects to the server. We can create custom events instead of using 'connection'

`socket.emit(NAME_OF_EVENT, VARIABLES)`
^ above calls the function with the matching event name on the server and passes it the variables listed.

`socket.on(NAME_OF_EVENT, (Variable 1, Variable 2, Variable n) => {})`
^ above listens for a server to emit the event NAME_OF_EVENT and passes the variables to the function in line.

`socket.emit(NAME_OF_EVENT, VARIABLES, Callback => {Do stuff Here with VARIABLES_2})`
^ above emits a signal and also waits for a return function. Callback always has to be the final argument.
In the event on the sever, call the callback with EX(VARIABLES_2) where EX is the variable the client used.



FURTHER NOTES

Socket.io namespaces can be used to inject authentication to sockets. This could be handy for us but might be irrelevant if we just use a different on-connect function for each user type as they connect and assign users to a room on joining, which I think we already need to do in order to have messages directed to the right meeting.

Middleware uses IO.use() which has more information here: https://socket.io/docs/v3/middlewares/


The following page shows how socket.io can be used with React and Node.js and is fairly easy to follow. How socket.io is used is still changed from plain JS, but it's not massively different. It's still possible to follow the code. As well, sokcet.io has really good documentation, but it's not exactly written with React in mind. Still a good read to understand the basics a bit better.

https://www.valentinog.com/blog/socket-react/
https://socket.io/docs/v4/

Rooms can be used to contain the Object tabs in Content message, as well as to make sure messages are only sent to the relevant meeting should two meetings be occuring at the same time. We could also use this with the buttons to interact with the database, which would allow us to keep track of things like a user's vote status on the current agenda item. 





